{
	//
	// TIC-80 v.0.50.1 API
	//
	"TIC-80 print": {
		"prefix": "print",
		"body": [
			"print(\"${1:text}\"${2:,${3:x},${4:y}${5:,${6:color}${7:,${8:fixed}${9:,${10:scale}}}}})",
			"$0"
		],
		"description": "TIC-80 API \nПросто печатает текст на экран, используя системный шрифт, заданный в файле конфигурации."
	},
	"TIC-80 font": {
		"prefix": "font",
		"body": [
			"font(\"${1:text}\"${2:,${3:x},${4:y}${5:,${6:alpha_color}${7:,${8:w},${9:h}${10:,${11:fixed}${12:,${13:scale}}}}}})",
			"$0"
		],
		"description": "TIC-80 API \nПечатает текст на экран, используя пользовательский шрифт, заданный в области спрайтов переднего плана (FG)."
	},
	"TIC-80 clip": {
		"prefix": "clip",
		"body": [
			"clip(${1:${2:x},${3:y},${4:width},${5:height}})",
			"$0"
		],
		"description": "TIC-80 API \nЭта функция ограничивает то, что рисуется на экране параметрами ограничивающего прямоугольника. Всё что выходит за границы, не будет отображаться на экране."
	},
	"TIC-80 cls": {
		"prefix": "cls",
		"body": [
			"cls(${1:color})",
			"$0"
		],
		"description": "TIC-80 API \nПри вызове этой функции очищается весь экран и заливается цветом указанном в качестве параметра."
	},
	"TIC-80 pix": {
		"prefix": "pix",
		"body": [
			"pix(${1:x},${2:y},${3:color})",
			"$0"
		],
		"description": "TIC-80 API \nФункция рисует цветной пиксель по указанным координатам. Также может использоваться только для получения значения цвета пикселя на экране."
	},
	"TIC-80 line": {
		"prefix": "line",
		"body": [
			"line(${1:x0},${2:y0},${3:x1},${4:y1},${5:color})",
			"$0"
		],
		"description": "TIC-80 API \nРисует прямую цветную линию начиная с координат (x0,y0) до (x1,y1)."
	},
	"TIC-80 rect": {
		"prefix": "rect",
		"body": [
			"rect(${1:x},${2:y},${3:width},${4:height},${5:color})",
			"$0"
		],
		"description": "TIC-80 API \nЭта функция рисует цветной заполненный прямоугольник по указанным координатам. Если Вам нужно отрисовать только рамку, используйте функцию rectb"
	},
	"TIC-80 rectb": {
		"prefix": "rectb",
		"body": [
			"rectb(${1:x},${2:y},${3:width},${4:height},${5:color})",
			"$0"
		],
		"description": "TIC-80 API \nЭта функция рисует цветную рамку-прямоугольник по указанным координатам. Если Вам нужно отрисовать заполненный цветом прямоугольник, используйте функцию rect"
	},
	"TIC-80 circ": {
		"prefix": "circ",
		"body": [
			"circ(${1:x},${2:y},${3:radius},${4:color})",
			"$0"
		],
		"description": "TIC-80 API \nРисует заполненный цветной круг с центром x и y с указанным радиусом. Используется алгоритм 'bresenham'."
	},
	"TIC-80 circb": {
		"prefix": "circb",
		"body": [
			"circb(${1:x},${2:y},${3:radius},${4:color})",
			"$0"
		],
		"description": "TIC-80 API \nРисует цветную окружность с центром x и y с указанным радиусом. Используется алгоритм 'bresenham'."
	},
	"TIC-80 spr": {
		"prefix": "spr",
		"body": [
			"spr(${1:id},${2:x},${3:y}${4:,${5:alpha_color}${6:,${7:scale}${8:,${9:flip},${10:${11:rotate}${12:,${13:cell_width},${14:cell_height}}}}}})",
			"$0"
		],
		"description": "TIC-80 API \nВыводит на экран спрайт по указанному индексу в определенные координаты."
	},
	"TIC-80 btn": {
		"prefix": "btn",
		"body": [
			"btn(${1:id})",
			"$0"
		],
		"description": "TIC-80 API \nФункция опрашивает состояние кнопки подключенной к TIC."
	},
	"TIC-80 btnp": {
		"prefix": "btnp",
		"body": [
			"btnp(${1:id}${2:,${3:hold},${4:period}})",
			"$0"
		],
		"description": "TIC-80 API \nЭта функция позволяет читать статус одной из кнопок, задействованных в TIC. Функция возвращает значение true только в момент нажатия на клавишу. Она также может быть использована с параметрами hold и period, которые позволяют возвращать true во время нажатия кнопки. После того как время нажатия hold закончится, функция вернет true каждый раз когда закончится время указанного периода period. Время выражается в тиках: при 60 fps это означает, что 120 тиков равны 2 секундам."
	},
	"TIC-80 sfx": {
		"prefix": "sfx",
		"body": [
			"sfx(${1:${2:id}${3:,${4:note}${5:,${6:duration}${7:,${8:channel}${9:,${10:volume}${11:,${12:speed}}}}}}})",
			"$0"
		],
		"description": "TIC-80 API \nВоспроизводит звуковой эффект по указанному id и параметрам."
	},
	"TIC-80 map": {
		"prefix": "map",
		"body": [
			"map(${1:${2:cell_x},${3:cell_y}${4:,${5:cell_w},${6:cell_h}${7:,${8:x},${9:y}${10:,${11:alpha_color}${12:,${13:scale}${14:,${15:remap}}}}}}})",
			"$0"
		],
		"description": "TIC-80 API \nКарта измеряется в ячейках, блоки 8x8 пикселей, куда вы можете поставить тайл в редакторе карты тайлов. Функция может печатать всю карту либо часть её. Максимальный размер карты ограничен значением 240x136 ячеек."
	},
	"TIC-80 mget": {
		"prefix": "mget",
		"body": [
			"mget(${1:cell_x},${2:cell_y})",
			"$0"
		],
		"description": "TIC-80 API \nСчитывает индекс тайла по указанным координатам на карте тайлов. Этот индекс соответствует индексу спрайта, который размещен в спрайт-листе графики заднего плана, индексы 0-255."
	},
	"TIC-80 mset": {
		"prefix": "mset",
		"body": [
			"mset(${1:cell_x},${2:cell_y},${3:id})",
			"$0"
		],
		"description": "TIC-80 API \nУстанавливает индекс тайла карты, т.е. индекс спрайта, который размещен в спрайт-листе графики заднего плана, индексы 0-255. По умолчанию внесенные изменения сохраняются только во время текущей игры. Чтобы внести постоянные изменения в карту, см. sync"
	},
	"TIC-80 music": {
		"prefix": "music",
		"body": [
			"music(${1:${2:track}${3:,${4:frame}${5:,${6:row}${7:,${8:loop}}}}})",
			"$0"
		],
		"description": "TIC-80 API \nВоспроизводит музыкальный трек по указанному индексу трека. Для того чтобы остановить воспроизведение, нужно вызвать эту функцию без аргументов."
	},
	"TIC-80 peek": {
		"prefix": "peek",
		"body": [
			"peek(${1:address})",
			"$0"
		],
		"description": "TIC-80 API \nЭта функция позволяет читать значения памяти TIC - байт."
	},
	"TIC-80 poke": {
		"prefix": "poke",
		"body": [
			"poke(${1:address},${2:value})",
			"$0"
		],
		"description": "TIC-80 API \nЭта функция позволяет записывать значения в память TIC - байт."
	},
	"TIC-80 peek4": {
		"prefix": "peek4",
		"body": [
			"peek4(${1:address})",
			"$0"
		],
		"description": "TIC-80 API \nЭта функция позволяет читать значения памяти TIC - полубайт."
	},
	"TIC-80 poke4": {
		"prefix": "poke4",
		"body": [
			"poke4(${1:address},${2:value})",
			"$0"
		],
		"description": "TIC-80 API \nЭта функция позволяет записывать значения в память TIC - полубайт."
	},
	"TIC-80 memcpy": {
		"prefix": "memcpy",
		"body": [
			"memcpy(${1:to_addr},${2:from_addr},${3:len})",
			"$0"
		],
		"description": "TIC-80 API \nКопирует блок памяти указанного размера из одной области в другую. Адрес указывается в шестнадцатеричном формате, но возвращаемое значение в десятичном."
	},
	"TIC-80 memset": {
		"prefix": "memset",
		"body": [
			"memset(${1:address},${2:value},${3:len})",
			"$0"
		],
		"description": "TIC-80 API \nЗаполняет память указанным значением. Адрес указывается в шестнадцатеричном формате, но возвращаемое значение в десятичном."
	},
	"TIC-80 pmem": {
		"prefix": "pmem",
		"body": [
			"pmem(${1:index},${2:value})",
			"$0"
		],
		"description": "TIC-80 API \nЭта функция позволяет сохранять и получать данные одного из 7 доступных слотов в постоянной памяти."
	},
	"TIC-80 trace": {
		"prefix": "trace",
		"body": [
			"trace(\"${1:text}\"${2:,${3:color}})",
			"$0"
		],
		"description": "TIC-80 API \nЭто сервисная функция для отладки кода. Выводит в консоль переданный параметр."
	},
	"TIC-80 time": {
		"prefix": "time",
		"body": [
			"time()",
			"$0"
		],
		"description": "TIC-80 API \nФункция возвращает количество миллисекунд прошедших с начала запуска приложения. Полезно при отслеживании времени, анимации объектов и событиях изменяющихся во времени."
	},
	"TIC-80 mouse": {
		"prefix": "mouse",
		"body": [
			"${1:mx},${2:my},${3:mp}=mouse()",
			"$0"
		],
		"description": "TIC-80 API \nФункция возвращает координаты мыши и состояние нажатия. Для использования этой функции в метаданных картриджа должно быть прописано -- input: mouse. Будьте внимательны, включение поддержки мыши отключит джойстики."
	},
	"TIC-80 tri": {
		"prefix": "tri",
		"body": [
			"tri(${1:x1},${2:y1},${3:x2},${4:y2},${5:x3},${6:y3},${7:color})",
			"$0"
		],
		"description": "TIC-80 API \nРисует треугольник заполненный цветом."
  },
  "TIC-80 textri": {
		"prefix": "textri",
		"body": [
			"textri(${1:x1},${2:y1},${3:x2},${4:y2},${5:x3},${6:y3},${7:u1},${8:v1},${9:u2},${10:v2},${11:u3},${12:v3},${13:use_map},${14:chroma})",
			"$0"
		],
		"description": "TIC-80 API \nОтображает треугольник, заполненный текстурой с помощью изображения ram или map ram."
	},
	"TIC-80 sync": {
		"prefix": "sync",
		"body": [
			"sync(${1:toCart})",
			"$0"
		],
		"description": "TIC-80 API \nДанная функция используется для сохранения изменений в спрайтах/карте тайлов/звуках во время игры, иначе данные возвращаются к исходному состоянию."
	},
	// Специальные функции
	"TIC-80 TIC": {
		"prefix": "tic",
		"body": [
			"function TIC()",
			"\t$0",
			"end"
		],
		"description": "TIC-80 API \nГлавная функция обновления"
	},
	"TIC-80 scanline": {
		"prefix": "scanline",
		"body": [
			"function scanline(scnline)",
			"\t$0",
			"end"
		],
		"description": "TIC-80 API \nФункция обновления строки"
	},
	"TIC-80 init": {
		"prefix": "init",
		"body": [
			"function init()",
			"\t$0",
			"end",
			"",
			"init()"
		],
		"description": "TIC-80 API \nФункция инициализации"
	},
	// Метаданные картриджа
	"TIC-80 cartridge metadata": {
		"prefix": "ticmeta",
		"body": [
			"-- title:  ${1:game title}",
			"-- author: ${2:game developer}",
			"-- desc:   ${3:short description}",
			"-- script: ${4:lua}",
			"${5:-- saveid: ${6:gameName}}",
			"${7:-- input: mouse}",
			"$0"
		],
		"description": "TIC-80 API \nМетаданные картриджа"
	},
	// Коллбэк для функции map
	"TIC-80 remap": {
		"prefix": "remap",
		"body": [
			"function remap(tile,x,y)",
			"\t$0",
			"end"
		],
		"description": "TIC-80 API \nКоллбэк функция, позволяющая показывать/скрывать/отражать/поворачивать тайлы во время вывода области карты на экран."
	}
}